/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package assignment6b;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*; 
/**
 *
 * @author Dayton Chevalier
 * This application manages a simple time object that displays
 * hours, minutes, and seconds,  A button is included to advance
 * the time by one second for each click. 
 */
public class TimeTest extends JFrame implements ActionListener 
{
   private Time time;

   private JLabel hourLabel, minuteLabel, secondLabel;
   private JTextField hourField, minuteField, secondField, displayField;
   private JButton tickButton;
   private JButton zeroButton;

   // create Time3 object and set up GUI
   public TimeTest()
   {
      time = new Time();  // create Time object

      // Get content pane and change its layout to FlowLayout
      Container container = getContentPane();  
      container.setLayout( new FlowLayout() ); 

      // Set up hourLabel and hourField
      hourLabel = new JLabel( "Set Hour" );
      hourField = new JTextField( 10 );
      container.add( hourLabel );
      container.add( hourField );

      // set up minuteLabel and minuteField
      minuteLabel = new JLabel( "Set Minute" );
      minuteField = new JTextField( 10 );
      container.add( minuteLabel );
      container.add( minuteField );

      // set up secondLabel and secondField
      secondLabel = new JLabel( "Set Second" );
      secondField = new JTextField( 10 );
      container.add( secondLabel );
      container.add( secondField );

      // set up displayField
      displayField = new JTextField( 30 );
      displayField.setEditable( false );
      container.add( displayField );

      // set up tickButton
      tickButton = new JButton( "Add 1 to Second" );
      container.add( tickButton );
      
      // set up zeroButton
      zeroButton = new JButton("Zero time");
      container.add(zeroButton);

      // Register event handlers; this applet is the ActionListener, 
      // which contains method actionPerformed that will be called to 
      // handle action events generated by hourField, minuteField, 
      // secondField and tickButton
      hourField.addActionListener( this ); 
      minuteField.addActionListener( this );
      secondField.addActionListener( this );
      tickButton.addActionListener( this );
      zeroButton.addActionListener( this );

      displayTime(); // update text in displayField and status bar

      // Set application window attributes
      setTitle( "Time Management" );
      setDefaultCloseOperation( JFrame.EXIT_ON_CLOSE );
      setSize( 400, 300 );
      setVisible( true );

   } // end method init

   // update displayField and applet container's status bar
   public void displayTime()
   {
      displayField.setText( "Hour: " + time.getHour() + "; Minute: " + 
         time.getMinute() + "; Second: " + time.getSecond() );

   } // end method updateDisplay

   // add one to second and update hour/minute if necessary 
   public void tick()
   {
      time.setSecond( ( time.getSecond() + 1 ) % 60 );

      if ( time.getSecond() == 0 ) 
      {
         time.setMinute( ( time.getMinute() + 1 ) % 60 );

         if ( time.getMinute() == 0 )
            time.setHour( ( time.getHour() + 1 ) % 24 );
      }

   } // end method tick

   // event handler for button and textfield events
   public void actionPerformed( ActionEvent event )
   {
      // process tickButton event
      if ( event.getSource() == tickButton )
         tick();

      // process hourField event
      else if ( event.getSource() == hourField ) 
      {
         time.setHour( Integer.parseInt( hourField.getText() ) );
         hourField.setText( "" );
      }

      // process minuteField event
      else if ( event.getSource() == minuteField ) 
      {
         time.setMinute( Integer.parseInt( minuteField.getText() ) );
         minuteField.setText( "" );
      }

      // process secondField event
      else if ( event.getSource() == secondField ) 
      {
         time.setSecond( Integer.parseInt( secondField.getText() ) );
         secondField.setText( "" );
      }
      
      // process zeroButton event
      else if ( event.getSource() == zeroButton )
         time.zeroTime();

      displayTime(); // update text in displayField and status bar

   } // end method actionPerformed
   
   // Main method - to launch application
   public static void main( String args[] )
   { 
      TimeTest application = new TimeTest();
   }

} // end class TimeTest 
